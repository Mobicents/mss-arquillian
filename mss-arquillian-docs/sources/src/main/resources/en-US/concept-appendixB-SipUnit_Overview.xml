<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "MSS_Arquillian_Framework_User_Guide.ent">
%BOOK_ENTITIES;
]>

<chapter id="MSS_Arquillian_Framework_AppendixB_SipUnit_Overview">
	<title>Appendix B - SipUnit Overview</title>
	
	<para><ulink url="https://code.google.com/p/commtesting/wiki/SipUnit">SipUnit</ulink> provides a test environment geared toward unit testing
		SIP applications. It extends the JUnit test framework to incorporate
		SIP-specific assertions, and it provides a high-level API for
		performing the SIP operations needed to interact with or invoke a test
		target. A test program using the SipUnit API is written in Java and
		acts as a network element that sends/receives SIP requests and
		responses. The SipUnit API includes SIP User Agent Client (UAC), User
		Agent Server (UAS), and basic UAC/UAS Core functionality - the set of
		processing functions that resides above the SIP transaction and
		transport layers - for the purpose of interacting with the test
		target. SipUnit uses the JAIN-SIP reference implementation as its
		underlying SIP stack/engine. The primary goal of SipUnit is to
		abstract the details of SIP messaging/call handling and facilitate
		free-flowing, sequential test code so that a test target can be
		exercised quickly and painlessly.
	</para>

	<para>
		A test case will need the following SipUnit elements:
	</para>
	<itemizedlist>
		<listitem>
			<ulink
				url="https://mobicents.ci.cloudbees.com/job/SipUnit/lastSuccessfulBuild/artifact/sipunit/target/apidocs/org/cafesip/sipunit/SipStack.html">SipUnit.SipStack</ulink>
		</listitem>
		<listitem>
			<ulink
				url="https://mobicents.ci.cloudbees.com/job/SipUnit/lastSuccessfulBuild/artifact/sipunit/target/apidocs/org/cafesip/sipunit/SipPhone.html">SipUnit.SipPhone</ulink>
		</listitem>
		<listitem>
			<ulink
				url="https://mobicents.ci.cloudbees.com/job/SipUnit/lastSuccessfulBuild/artifact/sipunit/target/apidocs/org/cafesip/sipunit/SipCall.html">SipUnit.SipCall</ulink>
		</listitem>
	</itemizedlist>

	<para>
		The test class should extend SipTestCase class that provides a
		test
		environment and set of assert
		methods geared toward unit testing
		Java
		SIP applications. SipTestCase uses the
		JUnit test framework and
		API and
		extends junit.framework.TestCase. A SIP application test
		program should
		<itemizedlist>
			<listitem>
				uses the SipUnit API to invoke SIP operations against a
				test target applications
			</listitem>
			<listitem>
				uses the assert methods of this class in addition
				to any of the JUnit Assert methods to verify the results of the test
			</listitem>
		</itemizedlist>
	</para>

	<para>
		The framework provides a tool to easily create and instantiate
		SipUnit
		elements, the SipStackTool. For example:
	</para>
	<programlisting>
	<![CDATA[
	
	@RunWith(Arquillian.class)
	public class ShootistSipServletTest extends SipTestCase{
	...
	private SipStack receiver;	
	private SipCall sipCall;
	private SipPhone sipPhone;
	private static SipStackTool sipStackTool;
	...
	@Before
	public void setUp() throws Exception{
		//Create the sipCall and start listening for messages
		receiver = sipStackTool.initializeSipStack(SipStack.PROTOCOL_UDP, "127.0.0.1", "5080", "127.0.0.1:5070");
		sipPhone = receiver.createSipPhone("127.0.0.1", SipStack.PROTOCOL_UDP, 5070, "sip:LittleGuy@there.com");
		sipCall = sipPhone.createSipCall();
		sipCall.listenForIncomingCall();
	}
	...
	@After
	public void tearDown() throws Exception{
		if(sipCall != null)	sipCall.disposeNoBye();
		if(sipPhone != null) sipPhone.dispose();
		if(receiver != null) receiver.dispose();
	}
	]]>
	</programlisting>

</chapter>
