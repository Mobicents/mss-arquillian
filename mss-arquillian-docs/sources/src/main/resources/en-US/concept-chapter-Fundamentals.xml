<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "MSS_Arquillian_Framework_User_Guide.ent">
%BOOK_ENTITIES;
]>
<!-- chapter id nickname: ittsss -->
<chapter id="Fundamentals_MSS_Arquillian_Framework">
	<title>Fundamentals</title>

	<section>
		<title>Test Suite Elements</title>
		<para>The project we created in the previous chapter contains the
			following elements:
		</para>
		<itemizedlist id="MSS_Arquillian_Framework_TestSuite_Elements">
			<listitem>
				<para>Defines the embedded container along
					with the configuration and
					resources it needs.
				</para>
			</listitem>
			<listitem>
				<para>Creates the test archive that will be deployed automatically
					(or manually
					as we will see later) to the container. The test
					archive is the Sip
					Servlet application we wish to test.
				</para>
			</listitem>
			<listitem>
				<para>Defines the SIP client, SipUnit, that will be used later to
					interact with the deployed Sip Servlet application in order
					to
					provide the results of the test.
				</para>
			</listitem>
			<listitem>
				<para>The test classes that contain one or more test methods that
					will be run in order to verify our Sip Servlet application.
				</para>
			</listitem>
		</itemizedlist>

		<para>The project's directory structure looks like this:</para>
		<figure>
			<title>Test project structure</title>
			<mediaobject id="CDI_Telco_Framework_Extension">
				<imageobject>
					<imagedata width="550" align="center"
						fileref="images/TestProjectStructure.png" format="PNG" />
				</imageobject>
			</mediaobject>
		</figure>

		<para>
			<itemizedlist>
				<listitem>
					Folder
					<command>/src/test/java</command>
					contains the test classes
				</listitem>
				<listitem>
					Folder
					<command>/src/test/resources</command>
					contains the resources needed for the test
				</listitem>
				<listitem>
					Folder
					<command>/src/main/java</command>
					contains the Sip Servlet application classes
				</listitem>
			</itemizedlist>
		</para>

	</section>

	<section>
		<title>Resources and configuration for the container and the test
		</title>
		<para>
			The required configuration and resources files for the tests
			suite, will
			be places in the /src/test/resources/ folder.
			That
			includes, the Arquillian container and the Sip Servlet application
			configuration files. But also anything that you might want to include
			in the test archive should be placed in this folder.
		</para>

		<para>
			Here is a description of the configuration and resources files
			included in the project we created previously:
			<itemizedlist>
				<listitem>
					<para>
						<command>arquillian.xml</command>
						- Arquillian configuration file. This is where we will define the
						container
						and its parameters.
					</para>
				</listitem>
				<listitem>
					<para>
						<command>log4j.xml</command>
						- The Log4J configuration file
					</para>
				</listitem>
				<listitem>
					<para>
						<command>sip.xml</command>
						- The required for the Sip Servlet application, sip.xml
					</para>
				</listitem>
				<listitem>
					<para>
						<command>test-dar.properties</command>
						- Application Router properties for the Sip Servlet Application.
					</para>
				</listitem>
			</itemizedlist>
		</para>

		<para>
			Container's configuration file,
			<command>arquillian.xml</command>
			, is where we will
			define the properties for the container that our
			test case will work
			with.
		</para>
		<para>
			A typical configuration file for the MSS Arquillian container
			looks
			like this:
		</para>
		<para>
			<programlisting>
		    <![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<arquillian xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://jboss.org/schema/arquillian"
	xsi:schemaLocation="http://jboss.org/schema/arquillian http://jboss.org/schema/arquillian/arquillian_1_0.xsd">
	
       <container qualifier="mss-tomcat-embedded-6" default="true">
           <configuration>
               <property name="tomcatHome">target/mss-tomcat-embedded-6</property>
               <property name="workDir">work</property>
               <property name="bindHttpPort">8888</property>
               <property name="unpackArchive">true</property>
               <property name="sipConnectors">:5070</property>
               <property name="sipApplicationRouterProviderClassName">org.mobicents.servlet.sip.router.DefaultApplicationRouterProvider</property>
           </configuration>
       </container>
</arquillian>
	]]>
	</programlisting>
		</para>

		<note>
			<para>
				See
				<xref linkend="MSS-Arquillian-Container">Mobicents Sip Servlets Arquillian Container
				</xref>
				for further details on the configuration of the container
			</para>
		</note>

		<note id="Container_Should_Be_In_Classpath">
			<title>How Arquillian controls the container</title>
			<para>
				In order for the Arquillian to pick up the container defined here
				and use it, the container artifact have to
				be in the classpath of the
				project
				(see
				<xref linkend="MSS_Arquillian_Framework_AppendixA_Maven_Project_Setup">Appendix A - Maven project setup</xref>
				)
			</para>
		</note>

		<para>
			The
			<command>test-dar.properties</command>
			file will be picked up by the container in order to configure the
			application router. So, for
			example, the Sip Servlet application of our project, have to receive the
			INVITE messages, so the file will contain:
			<para>
				<programlisting>
				INVITE: ("SimpleSipServletApplication", "DAR:From", "ORIGINATING", "", "NO_ROUTE", "0");
				</programlisting>
			</para>
		</para>

	</section>

	<section>
		<title>The test class</title>

		<para>
			In order for the test class to run with Arquillian, have to be
			annotated
			with
			<command>
				@RunWith(Arquillian.class)
			</command>
		</para>

		<para>
			With this annotation in the test class, Arquillian will first
			start the container, will create and deploy the test archive, will
			execute the test and last will provide the results.
		</para>

		<para>
			We can now initialise the required components needed and write
			our test methods.
		</para>
	</section>

	<section>
		<title>SipUnit</title>
		<para>
			We will need to initialise SipUnit in order to use later in the test
			methods.
		</para>
		<para>
			SipUnit have three basic components:
			<itemizedlist>
				<listitem>
					SipStack
				</listitem>
				<listitem>
					SipPhone
				</listitem>
				<listitem>
					SipCall
				</listitem>
			</itemizedlist>
			Also, Mobicents testing framework provides a helper tool that can be
			used to easily initialise the SipUnit SipStack and avoid all the
			boiller
			plate code.
			<itemizedlist>
				<listitem>
					SipStackTool
				</listitem>
			</itemizedlist>
		</para>

		<para>
			The follow code snipet show what it needs to initialise the SipUnit
		</para>
		<para>
			<programlisting>
	//SipUnit related components
	private SipStack sipUnitStack;
	private SipCall sipUnitCall;
	private SipPhone sipUnitPhone;
	private static SipStackTool sipStackTool;
	
	private static String toUri = "sip:sipservletapp@127.0.0.1:5070";
	
	@BeforeClass
	public static void beforeClass(){
		sipStackTool = new SipStackTool("receiver");
	}

	@Before
	public void setUp() throws Exception
	{	
		logger.info("Setting up SipUnit");
		//Create the sipCall and start listening for messages
		
		//.SipStackTool.initializeSipStack(String myTransport, String myHost, String myPort, String outboundProxy)
		sipUnitStack = sipStackTool.initializeSipStack(SipStack.PROTOCOL_UDP, "127.0.0.1", "5080", "127.0.0.1:5070");
		
		//SipStack.createSipPhone(String proxyHost, String proxyProto, int proxyPort, String myURI)
		sipUnitPhone = sipUnitStack.createSipPhone("127.0.0.1", SipStack.PROTOCOL_UDP, 5070, "sip:sipunit@here.com");
		
		sipUnitCall = sipUnitPhone.createSipCall();
		sipUnitCall.listenForIncomingCall();
	}

	@After
	public void tearDown() throws Exception
	{
		logger.info("Tear down SipUnit");
		if(sipUnitCall != null)	sipUnitCall.disposeNoBye();
		if(sipUnitPhone != null) sipUnitPhone.dispose();
		if(sipUnitStack != null) sipUnitStack.dispose();
	}
		</programlisting>
		</para>

		<note>
			<para>
				<ulink
					url="https://mobicents.ci.cloudbees.com/job/SipUnit/lastSuccessfulBuild/artifact/sipunit/docs/jdocbook-mobicents/target/docbook/publish/en-US/html_single/index.html">
					SipUnit documentation can be found here
				</ulink>
			</para>
		</note>

	</section>

	<section>
		<title>The test archive</title>
		<para>
			Arquillian uses
			<ulink url="http://www.jboss.org/shrinkwrap">Shrinkwrap</ulink>
			project to assist developers in the creation of a test archive that
			will be ready to get deployed to a container.
		</para>

		<para>The test archive in our project is defined using this method:
		</para>
		<programlisting>
       <![CDATA[
	/*
	 * Define the test archive here.
	 * Pay attention to the properties of the Deployment annotation
	 * --name: the arquillian Deployer, you can deploy/undeploy this archive by using the name here
	 * --managed: if this is FALSE then the framework WILL NOT manage the lifecycle of this archive, the developer is responsible to deploy/undeploy
	 * --testable: as-client mode (https://docs.jboss.org/author/display/ARQ/Test+run+modes) 
	 */
	@Deployment(name="simple", managed=true, testable=false)
	public static WebArchive createTestArchive()
	{
		//Create a test archive named: simplesipservlet.war
		WebArchive webArchive = ShrinkWrap.create(WebArchive.class, "simplesipservlet.war");
		//Include the SimpleSipServlet.class from /src/main/java
		webArchive.addClasses(SimpleSipServlet.class);
		//Include as WEB-INF resource sip.xml the in-container-sip.xml from src/test/resources
		webArchive.addAsWebInfResource("in-container-sip.xml", "sip.xml");
		return webArchive;
	}
]]>
</programlisting>

		<para>Note the clear and concise way to express a test web archive.
			We
			first give a name to the archive, "simplesipservlet.war", then we add the
			Sip Servlet class itself - SimpleWebServlet.class - and last we add
			the
			WEB-INF resources, in our case sip.xml, that should
			exist
			in the src/test/resources directory as in-container-sip.xml.
		</para>

		<para>Arquillian after starting the container, will call the
			createTestArchive() method of the test class to get the test archive
			and deploy it in the container
		</para>

	</section>

	<section>
			<title>Test Method</title>
			<para>
				The test methods should be annotated with @Test, since we are
				working with JUnit 4.
			</para>

			<para>
				In order for a test method to interact with the deployed
				application,
				it will need to make use of a sip client.
				For this we are using SipUnit.
			</para>
			<para>See below a snippet of a test method:</para>
			<programlisting>
			<![CDATA[
	@Test
	public void testInitiateCall() {
		
		//Initiate a new call
		assertTrue(sipUnitCall.initiateOutgoingCall("sip:sipservletapp@127.0.0.1:5070", null));
		
		//Wait for answer
		assertTrue(sipUnitCall.waitForAnswer(5000));
		assertEquals(SipServletResponse.SC_OK, sipUnitCall.getLastReceivedResponse().getStatusCode());
		
		//Send ACK to 200 OK
		assertTrue(sipUnitCall.sendInviteOkAck());
		
		//Disconnect call and wait for 200 ok to BYE
		assertTrue(sipUnitCall.disconnect());
		assertEquals(SipServletResponse.SC_OK,sipUnitCall.getLastReceivedResponse().getStatusCode());	
	}
			]]>
		</programlisting>

		<note>
			<para>
				See
				<xref linkend="MSS_Arquillian_Framework_AppendixB_SipUnit_Overview">Appendix B - SipUnit overview</xref>
				, provides an overview of SipUnit project.
			</para>
		</note>
	</section>

	<section>
		<title>Summary</title>

		<para>Let's summarize now what is needed to create a test project
		</para>
		<itemizedlist>
			<listitem>
				<para>
					Create your maven project using the provided maven archetypes-
					<xref linkend="Getting_Started">Getting Started</xref>
				</para>
			</listitem>
			<listitem>
				<para>
					Place your application classes in the src/main/java.
				</para>
			</listitem>
			<listitem>
				<para>
					Provide the required resources and configuration files in the
					src/test/resources.
				</para>
			</listitem>
			<listitem>
				<para>
					Write the actual test class in the src/test/java. Annotate it
					with @RunWith(Arquillian.class), write
					@Before/@After/@BeforeClass/@AfterClass methods if needed,
					provide
					the createTestArchive() method, and implement the test methods with
					the logic you want.
				</para>
			</listitem>
		</itemizedlist>

		<para>Below you can see the complete test class.</para>
		<programlisting>
       <![CDATA[
package com.mycompany.app;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import javax.servlet.sip.SipServletResponse;

import org.apache.log4j.Logger;
import org.cafesip.sipunit.SipCall;
import org.cafesip.sipunit.SipPhone;
import org.cafesip.sipunit.SipStack;
import org.jboss.arquillian.container.mss.extension.SipStackTool;
import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;

/**
 * @author <a href="mailto:gvagenas@gmail.com">gvagenas</a>
 */

@RunWith(Arquillian.class)
public class SimpleSipServletTest {

	private static Logger logger = Logger.getLogger(SimpleSipServletTest.class);
	
	//SipUnit related components
	private SipStack sipUnitStack;
	private SipCall sipUnitCall;
	private SipPhone sipUnitPhone;
	private static SipStackTool sipStackTool;
	
	@BeforeClass
	public static void beforeClass(){
		sipStackTool = new SipStackTool("receiver");
	}

	@Before
	public void setUp() throws Exception
	{	
		logger.info("Setting up SipUnit");
		//Create the sipCall and start listening for messages
		
		//.SipStackTool.initializeSipStack(String myTransport, String myHost, String myPort, String outboundProxy)
		sipUnitStack = sipStackTool.initializeSipStack(SipStack.PROTOCOL_UDP, "127.0.0.1", "5080", "127.0.0.1:5070");
		//SipStack.createSipPhone(String proxyHost, String proxyProto, int proxyPort, String myURI)
		sipUnitPhone = sipUnitStack.createSipPhone("127.0.0.1", SipStack.PROTOCOL_UDP, 5070, "sip:sipunit@here.com");
		sipUnitCall = sipUnitPhone.createSipCall();
		sipUnitCall.listenForIncomingCall();
	}

	@After
	public void tearDown() throws Exception
	{
		logger.info("Tear down SipUnit");
		if(sipUnitCall != null)	sipUnitCall.disposeNoBye();
		if(sipUnitPhone != null) sipUnitPhone.dispose();
		if(sipUnitStack != null) sipUnitStack.dispose();
	}
	
	/*
	 * Define the test archive here.
	 * Pay attention to the properties of the Deployment annotation
	 * --name: the arquillian Deployer, you can deploy/undeploy this archive by using the name here
	 * --managed: if this is FALSE then the framework WILL NOT manage the lifecycle of this archive, the developer is responsible to deploy/undeploy
	 * --testable: as-client mode (https://docs.jboss.org/author/display/ARQ/Test+run+modes) 
	 */
	@Deployment(name="simple", managed=true, testable=false)
	public static WebArchive createTestArchive()
	{
		//Create a test archive named: simplesipservlet.war
		WebArchive webArchive = ShrinkWrap.create(WebArchive.class, "simplesipservlet.war");
		//Include the SimpleSipServlet.class from /src/main/java
		webArchive.addClasses(SimpleSipServlet.class);
		//Include as WEB-INF resource sip.xml the in-container-sip.xml from src/test/resources
		webArchive.addAsWebInfResource("in-container-sip.xml", "sip.xml");

		return webArchive;
	}
	
	/*
	 *****************************
	 *Tests 
	 *****************************
	 **/
	
	@Test
	public void testInitiateCall() {
		
		//Initiate a new call
		assertTrue(sipUnitCall.initiateOutgoingCall("sip:sipservletapp@127.0.0.1:5070", null));
		
		//Wait for answer
		assertTrue(sipUnitCall.waitForAnswer(5000));
		assertEquals(SipServletResponse.SC_OK, sipUnitCall.getLastReceivedResponse().getStatusCode());
		
		//Send ACK to 200 OK
		assertTrue(sipUnitCall.sendInviteOkAck());
		
		//Disconnect call and wait for 200 ok to BYE
		assertTrue(sipUnitCall.disconnect());
		assertEquals(SipServletResponse.SC_OK,sipUnitCall.getLastReceivedResponse().getStatusCode());	
	}
	
}
]]>
</programlisting>
	</section>
</chapter>
