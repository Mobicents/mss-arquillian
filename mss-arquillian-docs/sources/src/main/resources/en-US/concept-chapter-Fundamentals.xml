<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "MSS_Arquillian_Framework_User_Guide.ent">
%BOOK_ENTITIES;
]>
<!-- chapter id nickname: ittsss -->
<chapter id="Fundamentals_MSS_Arquillian_Framework">
	<title>Fundamentals</title>

<section>
<title>Test Suite Elements</title>
	<para>The test suite will define the following elements</para>
	<itemizedlist id="MSS_Arquillian_Framework_TestSuite_Elements">
		<listitem>
			<para>The embedded container along
				with the configuration and resources needed.
			</para>
		</listitem>
		<listitem>
			<para>The test archive that will be deployed automatically (or manually
				as we will see later) to the container. The test archive is the Sip Servlet application we wish to test.
			</para>
		</listitem>
		<listitem>
			<para>The test classes that contain one or more test methods. The sip client will
				interact with the deployed application in order to perform the tests
				and provide the results.
			</para>
		</listitem>
	</itemizedlist>

	<para>A typical project will have the following structure:</para>
	<figure>
		<title>Test project structure</title>
		<mediaobject id="CDI_Telco_Framework_Extension">
			<imageobject>
				<imagedata width="550" align="center"
					fileref="images/TestProjectStructure.png" format="PNG" />
			</imageobject>
		</mediaobject>
	</figure>
</section>

<section>
<title>Container, test resources and configuration</title>
	<!-- <formalpara id="MSS_Arquillian_Framework_Test_Resources"> -->
		<formalpara><title>Resources and configuration files</title></formalpara>
		<para>
		The required configuration files and resources to our testsuite will be places in the /src/test/resources/ folder.
		That includes, the Arquillian container and the Sip Servlet application configuration files.
		</para>

		<itemizedlist>
			<listitem>
				<para>
					<emphasis>arquillian.xml</emphasis>
					- Arquillian configuration file. This is where we will define the
					container
					and its parameters.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis>web.xml</emphasis>
					- The required by the Sip Servlet application, web.xml
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis>sip.xml</emphasis>
					- The required by the Sip Servlet application, sip.xml
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis>test-dar.properties</emphasis>
					- Application Router properties for the Sip Servlet Application.
				</para>
			</listitem>
		</itemizedlist>

		<para>We wont take time to discuss the web.xml and sip.xml files over
			here, as they should be already familiar.
		</para>
		<para>Container's configuration file, arquillian.xml, is where we will
			define the container that the test case will work with, and also the
			parameters for this container.
		</para>
		<para>A typical configuration file for the MSS Arquillian container
			looks
			like this:
		</para>
		<programlisting>
		    <![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<arquillian xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://jboss.org/schema/arquillian"
	xsi:schemaLocation="http://jboss.org/schema/arquillian http://jboss.org/schema/arquillian/arquillian_1_0.xsd">
	
       <container qualifier="mss-tomcat-embedded-6" default="true">
           <configuration>
               <property name="tomcatHome">target/mss-tomcat-embedded-6</property>
               <property name="workDir">work</property>
               <property name="bindHttpPort">8888</property>
               <property name="unpackArchive">true</property>
               <property name="sipConnectors">:5070</property>
               <property name="sipApplicationRouterProviderClassName">org.mobicents.servlet.sip.router.DefaultApplicationRouterProvider</property>
           </configuration>
       </container>
</arquillian>
	]]>
	</programlisting>

		<!-- <para>As you can see, here we define the following: </para> -->
		<!-- <itemizedlist> -->
		<!-- <listitem> -->
		<!-- <para>the container, mss-tomcat-embedded-6</para> -->
		<!-- </listitem> -->
		<!-- <listitem> -->
		<!-- <para>the tomcat home directory, "target/mss-tomcat-embedded-6" -->
		<!-- </para> -->
		<!-- </listitem> -->
		<!-- <listitem> -->
		<!-- <para>the work directory, "work"</para> -->
		<!-- </listitem> -->
		<!-- <listitem> -->
		<!-- <para>the bind HTTP port, which in our case will be 8888</para> -->
		<!-- </listitem> -->
		<!-- <listitem> -->
		<!-- <para>we set to true the "unpackArchive" option</para> -->
		<!-- </listitem> -->
		<!-- <listitem> -->
		<!-- <para>the sip connectors, we define here only one - UDP/5070</para> -->
		<!-- </listitem> -->
		<!-- <listitem> -->
		<!-- <para>the default application router</para> -->
		<!-- </listitem> -->
		<!-- </itemizedlist> -->

		<para>
			See
			<xref linkend="MSS-Arquillian-Container">Mobicents Sip Servlets Arquillian Container</xref>
			for further details on the configuration of the container
		</para>

		<note id="Container_Should_Be_In_Classpath">
			<title>How Arquillian controls the container</title>
			<para>
				In order for the Arquillian to pick up the container defined here
				and use it, the container have to
				be in the classpath of the project
				(see
				<xref linkend="MSS_Arquillian_Framework_AppendixA_Maven_Project_Setup">Appendix A - Maven project setup</xref>
				)
			</para>
		</note>
	<!-- </formalpara> -->
</section>

<section>
	<formalpara id="MSS_Arquillian_Framework_Test_Class">
		<title>The test class</title>

		<para>
			For the test class to run with Arquillian, have to be annotated
			with
			@RunWith(Arquillian.class)
		</para>
	</formalpara>
	<formalpara id="MSS_Arquillian_Framework_Test_Archive">
		<title>The test archive</title>
		<para>
			Arquillian uses
			<ulink url="http://www.jboss.org/shrinkwrap">Shrinkwrap</ulink>
			project to assist developers in the creation of a test archive that
			will be ready to get deployed to a container. In the case of the MSS
			Arquillian container, we will be using
			org.jboss.shrinkwrap.api.spec.WebArchive type to create an archive
			suitable for deployement in our Mobicents Sip Servlets container.
		</para>

		<para>The test archive can be created like this:</para>
		<programlisting>
       <![CDATA[
	@Deployment
	public static WebArchive createTestArchive(name="simple", managed="false", testable="false"){
		WebArchive webArchive = ShrinkWrap.create(WebArchive.class, "click2call.war");
		webArchive.addClasses(Click2DialSipServlet.class, SimpleWebServlet.class);
		webArchive.addAsWebInfResource("in-container-web.xml", "web.xml");
		webArchive.addAsWebInfResource("in-container-sip.xml", "sip.xml");
		return webArchive;
	}
]]>
</programlisting>

		<para>Note the clear and concise way to express a test web archive. We
			first give a name to the archive, "click2call.war", then we add the
			application itself - SimpleWebServlet.class - and last we add the
			WEB-INF resources, in our case sip.xml and web.xml, that should exist
			in the src/test/resources directory as in-container-sip.xml and
			in-container-web.xml.
		</para>

		<para>Arquillian after starting the container, will call the
			createTestArchive() method of the test class to get the test archive
			and deploy it in the container
		</para>

	</formalpara>
</section>
<section>
	<formalpara id="MSS_Arquillian_Framework_Test_Methods">
		<title>Test Methods</title>
		<para>
			The test methods should be annotated with @Test, since we are
			working
			with JUnit 4.
		</para>

		<para>
			In order for a test method to interact with the deployed application,
			it will need to make use of a sip client.
			For this we are using
			<ulink url="http://www.cafesip.org/projects/sipunit/index.html">SipUnit</ulink>
			.
			We are collaborating with CafeSip developers on the SipUnit project
			in
			order to provide new features, fix bugs etc in the project.
		</para>
		<para>See below a snippet of a test method:</para>
		<programlisting>
			<![CDATA[
	@Test
	public void testClickToCallNoConvergedSession() throws Exception {

		SipCall sipCallA = ua.createSipCall();
		SipCall sipCallB = ub.createSipCall();

		sipCallA.listenForIncomingCall();
		sipCallB.listenForIncomingCall();
		
		log.info("Trying to reach url : " + CLICK2DIAL_URL
				+ CLICK2DIAL_PARAMS);

		URL url = new URL(CLICK2DIAL_URL + CLICK2DIAL_PARAMS);
		InputStream in = url.openConnection().getInputStream();

		byte[] buffer = new byte[10000];
		int len = in.read(buffer);
		String httpResponse = "";
		for (int q = 0; q < len; q++)
			httpResponse += (char) buffer[q];
		log.info("Received the following HTTP response: " + httpResponse);

		assertTrue(sipCallA.waitForIncomingCall(timeout));

		assertTrue(sipCallA.sendIncomingCallResponse(Response.RINGING,
				"Ringing", 0));
		assertTrue(sipCallA.sendIncomingCallResponse(Response.OK, "OK",
				0));

		assertTrue(sipCallB.waitForIncomingCall(timeout));

		assertTrue(sipCallB.sendIncomingCallResponse(Response.RINGING,
				"Ringing", 0));
		assertTrue(sipCallB.sendIncomingCallResponse(Response.OK, "OK",
				0));

		assertTrue(sipCallB.waitForAck(timeout));
		assertTrue(sipCallA.waitForAck(timeout));

		assertTrue(sipCallA.disconnect());
		assertTrue(sipCallB.waitForDisconnect(timeout));
		assertTrue(sipCallB.respondToDisconnect());
	}
			]]>
		</programlisting>

		<!-- <note id="Run_With_Arquillian_Annotation"> -->
		<!-- <title>Test class have to be annotated with -->
		<!-- @RunWith(Arquillian.class) -->
		<!-- </title> -->
		<!-- <para> -->
		<!-- For the test class to run with Arquillian, have to be annotated -->
		<!-- with @RunWith(Arquillian.class) -->
		<!-- </para> -->
		<!-- </note> -->

		<!-- <note id="JUnit_Methods"> -->
		<!-- <title>Make use of JUnit methods</title> -->
		<!-- <para> -->
		<!-- Since we are working with JUnit 4, we can provide methods in -->
		<!-- our -->
		<!-- test class to be run @Before or @After our test methods, and -->
		<!-- @BeforeClass or @AfterClass to be run before and after the test -->
		<!-- class instantiation. -->
		<!-- </para> -->
		<!-- </note> -->

		<para>
			See
			<xref linkend="MSS_Arquillian_Framework_AppendixB_SipUnit_Overview">Appendix B - SipUnit overview</xref>
			, provides an overview of SipUnit project.
		</para>
	</formalpara>
</section>

	<formalpara id="MSS_Arquillian_Framework_Test_Summary">
		<title>Summary</title>

		<para>Let's summarize now what is needed to create a test project
		</para>
		<itemizedlist>
			<listitem>
				<para>
					Create your maven project with all the required dependencies-
					<xref linkend="MSS_Arquillian_Framework_AppendixA_Maven_Project_Setup">Appendix A - Maven project setup</xref>
				</para>
			</listitem>
			<listitem>
				<para>
					Place the application classes in the src/main/java.
				</para>
			</listitem>
			<listitem>
				<para>
					Provide the required resources and configuration files in the
					src/test/resources.
				</para>
			</listitem>
			<listitem>
				<para>
					Write the actual test class in the src/test/java. Annotate it
					with @RunWith(Arquillian.class), write
					@Before/@After/@BeforeClass/@AfterClass methods if needed,
					provide
					the createTestArchive() method, and implement the test methods with
					the logic you want.
				</para>
			</listitem>
		</itemizedlist>
	</formalpara>

	<formalpara id="MSS_Arquillian_Framework_Test_Example">
		<title>Test Case example</title>

		<para>See below a complete test class.</para>
		<programlisting>
       <![CDATA[
/**
 * Tests that SIP Servlets deployments into the  Mobicents Sip Servlets server work through the
 * Arquillian lifecycle
 * 
 * @author gvagenas@gmail.com
 * @author Jean Deruelle
 * @version $Revision: $
 */
@RunWith(Arquillian.class)
public class Click2CallBasicTest extends SipTestCase
{	

	private SipStack sipStackA;
	private SipStack sipStackB;

	private SipPhone ua;
	private SipPhone ub;

	private String myPortA="5057";
	private String myPortB="5056";
	private String proxyPort="5070";

	@GetDeployableContainer
	private ContainerManagerTool containerManager;
    
	@ArquillianResource
    URL deploymentUrl;

	private static final int timeout = 10000;

	String CLICK2DIAL_URL = "http://127.0.0.1:8888/click2call/call";
	String RESOURCE_LEAK_URL = "http://127.0.0.1:8888/click2call/index.html";
	String EXPIRATION_TIME_PARAMS = "?expirationTime";
	String CLICK2DIAL_PARAMS = "?from=sip:from@127.0.0.1:5056&to=sip:to@127.0.0.1:5057";
	
	private static SipStackTool sipStackToolA;
	private static SipStackTool sipStackToolB;

	@BeforeClass
	public static void beforeClass(){
		sipStackToolA = new SipStackTool("sipStackA");
		sipStackToolB = new SipStackTool("sipStackB");
	}


	@Before
	public void setUp() throws Exception
	{
		log.info("Creating sipStackA");
		sipStackA = sipStackToolA.initializeSipStack(SipStack.PROTOCOL_UDP, "127.0.0.1", myPortA, "127.0.0.1:"+proxyPort);
		log.info("Creating sipStackB");
		sipStackB = sipStackToolB.initializeSipStack(SipStack.PROTOCOL_UDP, "127.0.0.1", myPortB, "127.0.0.1:"+proxyPort);
		
		log.info("About to start creating sipPhones");
		ua = sipStackA.createSipPhone("localhost",SipStack.PROTOCOL_UDP,Integer.valueOf(proxyPort), "sip:to@127.0.0.1");
		log.info("SipPhone A created!");
		ub = sipStackB.createSipPhone("localhost",SipStack.PROTOCOL_UDP,Integer.valueOf(proxyPort), "sip:from@127.0.0.1");
		log.info("SipPhone B created!");
	}

	@After
	public void tearDown() throws Exception
	{
		ua.dispose();
		sipStackA.dispose();
		ub.dispose();
		sipStackB.dispose();
	}

	/**
	 * Logger
	 */
	private static final Logger log = Logger.getLogger(Click2CallBasicTest.class.getName());


	/**
	 * Define the deployment
	 */
	@Deployment (testable=false)
	public static WebArchive createTestArchive()
	{
		WebArchive webArchive = ShrinkWrap.create(WebArchive.class, "click2call.war");
		webArchive.addClasses(Click2DialSipServlet.class, SimpleWebServlet.class);
		webArchive.addAsWebInfResource("in-container-web.xml", "web.xml");
		webArchive.addAsWebInfResource("in-container-sip.xml", "sip.xml");
		return webArchive;
	}


	@Test
	public void testClickToCallNoConvergedSession() throws Exception {

		SipCall sipCallA = ua.createSipCall();
		SipCall sipCallB = ub.createSipCall();

		sipCallA.listenForIncomingCall();
		sipCallB.listenForIncomingCall();
		
		log.info("Trying to reach url : " + CLICK2DIAL_URL
				+ CLICK2DIAL_PARAMS);

		URL url = new URL(CLICK2DIAL_URL + CLICK2DIAL_PARAMS);
		InputStream in = url.openConnection().getInputStream();

		byte[] buffer = new byte[10000];
		int len = in.read(buffer);
		String httpResponse = "";
		for (int q = 0; q < len; q++)
			httpResponse += (char) buffer[q];
		log.info("Received the following HTTP response: " + httpResponse);

		assertTrue(sipCallA.waitForIncomingCall(timeout));

		assertTrue(sipCallA.sendIncomingCallResponse(Response.RINGING,
				"Ringing", 0));
		assertTrue(sipCallA.sendIncomingCallResponse(Response.OK, "OK",
				0));

		assertTrue(sipCallB.waitForIncomingCall(timeout));

		assertTrue(sipCallB.sendIncomingCallResponse(Response.RINGING,
				"Ringing", 0));
		assertTrue(sipCallB.sendIncomingCallResponse(Response.OK, "OK",
				0));

		assertTrue(sipCallB.waitForAck(timeout));
		assertTrue(sipCallA.waitForAck(timeout));

		assertTrue(sipCallA.disconnect());
		assertTrue(sipCallB.waitForDisconnect(timeout));
		assertTrue(sipCallB.respondToDisconnect());
	}
	
	@Test @Ignore //TODO Arquillian Issue see: https://community.jboss.org/thread/178117
	public void testClickToCallHttpSessionLeak() throws Exception {
		
		final int sessionsNumber = containerManager.getSipStandardManager().getActiveSessions();
		
		log.info("Trying to reach url : " + RESOURCE_LEAK_URL);
		
		URL url = new URL(RESOURCE_LEAK_URL);
		URLConnection uc = url.openConnection();
		InputStream in = uc.getInputStream();
		
		byte[] buffer = new byte[10000];
		int len = in.read(buffer);
		String httpResponse = "";
		for (int q = 0; q < len; q++)
			httpResponse += (char) buffer[q];
		log.info("Received the follwing HTTP response: " + httpResponse);
		
		assertEquals(sessionsNumber, containerManager.getSipStandardManager().getActiveSessions());
	}

	@Test
	public void testClickToCallExpirationTime() throws Exception {				
		
		log.info("Trying to reach url : " + CLICK2DIAL_URL + EXPIRATION_TIME_PARAMS);
		
		URL url = new URL(CLICK2DIAL_URL + EXPIRATION_TIME_PARAMS);
		InputStream in = url.openConnection().getInputStream();
		
		byte[] buffer = new byte[10000];
		int len = in.read(buffer);
		String httpResponse = "";
		for (int q = 0; q < len; q++)
			httpResponse += (char) buffer[q];
		log.info("Received the follwing HTTP response: " + httpResponse);
		
		assertFalse("0".equals(httpResponse.trim()));
	}
]]>
</programlisting>
	</formalpara>
</chapter>
