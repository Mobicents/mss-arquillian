<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="Introduction_to_the_MSS_Arquillian_Framework">
	<title>Introduction</title>
	<!-- Introduction to Arquillian -->

	<para>
		Mobicents Sip Servlets testing framework is based on the
		Arquillian framework.
		The framework extends Arquillian by providing sip
		servlet enabled
		containers, extensions,
		and tools, required for the Sip
		Servlet applications testing.
	</para>
	<para>
		Mobicents Sip Servlets testing framework together with SipUnit
		and MgcpUnit,
		provides a complete testing solutions and makes
		integration testing a straight forward
		task.
	</para>

	<section>
		<title>Requirements</title>
		<para>
			A SIP servlet is a Java-based application component which is
			managed by
			a SIP servlet container
			and which performs SIP signaling.
			Servlets interact with (SIP) clients by
			exchanging request and
			response
			messages through the servlet container.
		</para>

		<para>
			In that regard, in order to test a Sip Servlet application the
			following requirements have to be met:

			<itemizedlist>
				<listitem>
					A Sip Servlet enabled container where we will deploy the SIP
					Servlet
					application to test
				</listitem>
				<listitem>
					Integration with a testing framework such as JUnit or TestNG
				</listitem>
				<listitem>
					A Sip client to interact with the application and being able to
					assert SIP signalling
				</listitem>
				<listitem>
					For some cases, a media gateway such as Mobicents Media Server,
					that
					the
					SIP Servlet application will interact.
				</listitem>
				<listitem>
					A client to assert mgcp operations
				</listitem>
			</itemizedlist>
		</para>
		<para>
			So lets discuss a bit further each of the above requirements.
			<orderedlist>
				<listitem>
					Sip Servlet container. We need a managed Sip Servlet container that
					we will be able to control and deploy the application.
					Mobicents Sip
					Servlet Arquillian containers will satisfy
					this requirement.
					Also the
					tools that Arquillian and Shrinkwrap
					projects provide,
					will
					help
					developer to create,
					manage and enhance the test
					archive (the
					Sip
					Servlet application
					to test).
				</listitem>
				<listitem>
					Arquillian provides out of the box integration with JUnit or TestNG
					testing frameworks, and since Mobicents Sip Servlet
					testing framework is based on Arquillian, the same holds true here . So
					our
					test suite will be able to make use of all the provided
					functionality and tools that come with these
					two testing frameworks.
				</listitem>
				<listitem>
					SipUnit is the SIP client that will interact with the
					application and enable us to test SIP Signalling.
				</listitem>
				<listitem>
					Embedded MediaServer extension, provides an embedded version of the
					<ulink url="https://code.google.com/p/mediaserver/">Mobicents Multimedia Server (MMS)</ulink>
					so the application will be able to interact
					with a managed media
					gateway using MGCP.
				</listitem>
				<listitem>
					The embedded MediaServer extension, provides a hook for listeners
					to
					register and
					receive all the MGCP requests and responses, and
					MgcpUnit is
					the project that will register as a listener and will
					help us
					to assert all mgcp operations.
				</listitem>
			</orderedlist>
			<para>
				This document will cover the Mobicents SipServlet enabled
				Arquillian container and the Embedded MediaServer extension.
			</para>
			<note>
				<para>
					SipUnit and MgcpUnit documentation project can be found here:
					<itemizedlist>
						<listitem>
							<ulink
								url="https://mobicents.ci.cloudbees.com/job/SipUnit/lastSuccessfulBuild/artifact/sipunit/docs/jdocbook-mobicents/target/docbook/publish/en-US/html_single/index.html">
								SipUnit documentation
							</ulink>
						</listitem>
						<listitem>
							MgcpUnit:
						</listitem>
					</itemizedlist>
				</para>
			</note>
		</para>
	</section>
	<section>

		<title>Few words for the Arquillian framework</title>

		<para>

			Arquillian brings the test to the runtime so you don’t have to
			manage
			the runtime from the test (or the build). Arquillian
			eliminates this
			burden by covering all aspects of test execution,
			which entails:
			<itemizedlist>
				<listitem>
					Managing the lifecycle of the container (or containers)
				</listitem>
				<listitem>
					Bundling the test case, dependent classes and resources into a
					ShrinkWrap archive (or archives)
				</listitem>
				<listitem>
					Deploying the archive (or archives) to the container (or
					containers)
				</listitem>
				<listitem>
					Enriching the test case by providing dependency injection and other
					declarative services
				</listitem>
				<listitem>
					Executing the tests inside (or against) the container
				</listitem>
				<listitem>
					Capturing the results and returning them to the test runner for
					reporting
				</listitem>
			</itemizedlist>
		</para>
		<para>
			To avoid introducing unnecessary complexity into the developer’s
			build
			environment, Arquillian integrates seamlessly with familiar
			testing
			frameworks (e.g., JUnit 4, TestNG 5), allowing tests to be
			launched
			using existing IDE, Ant and Maven test plugins — without any
			add-ons.
		</para>

		<para>
			Arquillian is a container-oriented test framework. It picks up
			where
			unit tests leave off, targeting the integration of application
			code
			inside a real runtime environment. Just as Java EE 5 simplified
			the
			server programming model by providing declarative services for
			POJOs,
			Arquillian equips tests with container lifecycle management and
			enrichment.
		</para>

		<para>
			Using Arquillian, you write a basic test case and annotate it
			with
			declarative behavior that says, "@RunWith Arquillian".
			This
			declaration tells Arquillian to take over execution of the test when
			it's launched.

			Launching an Arquillian test is as simple as
			right-clicking the test class in
			the IDE and selecting Run As > * Test
			(e.g., JUnit, TestNG, etc) or
			using Maven Surefire plugin "mvn test".
		</para>
		<para>
			Based on the classpath configuration, Arquillian starts the
			target
			container and deploys the test
			archive defined in the @Deployment method. The
			archive includes the
			test case along with the specified classes,
			resources and
			libraries.
			Your test then executes inside the container and enjoys all the same
			services as an application component.
			That means you get dependency
			and resource injection into the test, you
			can load a persistence unit,
			you can get a handle to a database connection, etc. (Arquillian also
			has
			a client run mode, which only deploys the test archive, not the
			test
			case).
			Arquillian then captures the test results and transports
			them back to the test
			runner for reporting.

			Aside from a few extra
			declarations (i.e., @RunWith and @Deployment), an
			Arquillian test
			looks like any other unit test and launched like any
			other unit test.
		</para>

		<note>
			<para>
			Since this document is not meant to replace Arquillian documentation,
			you can find below useful Arquillian links on how to get started.
			</para>
			<itemizedlist>
				<listitem>
					<ulink url="http://arquillian.org/">Arquillian Home</ulink>
				</listitem>
				<listitem>
					Arquillian Reference:
					<ulink url="https://docs.jboss.org/author/display/ARQ/Reference+Guide"></ulink>
				</listitem>
				<listitem>
					Arquillian Guides:
					<ulink url="http://arquillian.org/guides/getting_started/"></ulink>
				</listitem>
			</itemizedlist>
		</note>

	</section>
	<section>
		<title>Mobicents Sip Servlet testing framework and Arquillian</title>
		<para>
			Mobicents Sip Servlets testing framework brings the
			benefits of the Arquillian framework to the
			Sip Servlets.
		</para>
		<para>
			Integration testing for Sip Servlets applications now becomes
			much more simple.
			No need to extend and use complex
			classes and
			structures anymore.
		</para>
		<para>
			Mobicents Sip Servlets testing framework provides a standard
			environment to test Sip Servlet applications
			that will fit most of the
			cases, but having extensibilty as a major concern, a developer can
			extend the project and provide his own extensions to meet his needs.
		</para>

		<para>One of the most important benefit of the framework is the
			clear
			and concise model provided.
		</para>
		<para>All the parts of the framework can be
			replaced by
			equivalent modules if needed. For example, a developer might provide
			his own sip client
			instead of SipUnit.
		</para>

		<para>Extensibility is a major advantage also. Since the framework is
			based on Arquillian users can take advantages of other extensions
			already provided by the Arquillian ecosystem,
			or use Arquillian SPI to
			provide their own extension.
		</para>
	</section>
	<section>
		<title>Supported containers</title>
		<para>Mobicents Sip Servlet extension to Arquillian currently supports
			the following containers:
		</para>
		<itemizedlist>
			<listitem>
				Embedded Tomcat 6 container based on Mobicents Sip Servlets 1.7.0,
				Java Servlets 2.5
			</listitem>
			<listitem>
				Embedded Tomcat 7 container based on Mobicents Sip Servlets 2.0.0,
				Java Servlets 3.0
			</listitem>
		</itemizedlist>
	</section>
</chapter>
